//{ Driver Code Starts
//Initial Template for Java

import java.util.*;
import java.io.*;
import java.lang.*;

class Driver_class
{
    public static void main(String args[])
    {
        
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        
        while(t-- > 0)
        {
            int grid[][] = new int[9][9];
            for(int i = 0; i < 9; i++)
            {
                for(int j = 0; j < 9; j++)
                grid[i][j] = sc.nextInt();
            }
            
            Solution ob = new Solution();
            
            if(ob.SolveSudoku(grid) == true)
                ob.printGrid(grid);
            else
                System.out.print("NO solution exists");
            System.out.println();
            
        }
    }
}




// } Driver Code Ends


//User function Template for Java


class Solution {
    //Function to find a solved Sudoku. 
    static boolean SolveSudoku(int grid[][]) {
        int N = grid.length;
        int[] nextEmptyCell = findNextEmptyCell(grid);
        
        if (nextEmptyCell[0] == -1) {
            // If there are no empty cells left, the Sudoku is solved.
            return true;
        }
        
        int row = nextEmptyCell[0];
        int col = nextEmptyCell[1];
        
        // Try filling the empty cell with digits from 1 to 9.
        for (int num = 1; num <= 9; num++) {
            if (isValidMove(grid, row, col, num)) {
                // Make the move.
                grid[row][col] = num;

                // Recursively solve the remaining Sudoku.
                if (SolveSudoku(grid)) {
                    return true;
                }

                // Backtrack: Undo the current move.
                grid[row][col] = 0;
            }
        }

        // If no valid move is found, return false to trigger backtracking.
        return false;
    }

    // Function to find the next empty cell in the Sudoku grid.
    static int[] findNextEmptyCell(int[][] grid) {
        int[] result = new int[2];
        result[0] = -1; // If no empty cell is found, return [-1, -1].
        result[1] = -1;

        int N = grid.length;
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                if (grid[i][j] == 0) {
                    result[0] = i;
                    result[1] = j;
                    return result;
                }
            }
        }

        return result;
    }

    // Function to check if the move is valid in the Sudoku grid.
    static boolean isValidMove(int[][] grid, int row, int col, int num) {
        int N = grid.length;
        
        // Check if the number exists in the current row or column.
        for (int i = 0; i < N; i++) {
            if (grid[row][i] == num || grid[i][col] == num) {
                return false;
            }
        }

        // Check if the number exists in the current 3x3 sub-box.
        int subBoxRowStart = row - row % 3;
        int subBoxColStart = col - col % 3;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (grid[subBoxRowStart + i][subBoxColStart + j] == num) {
                    return false;
                }
            }
        }

        return true;
    }

    //Function to print grids of the Sudoku.
    static void printGrid(int grid[][]) {
        int N = grid.length;
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                System.out.print(grid[i][j] + " ");
            }
        }
    }
}
