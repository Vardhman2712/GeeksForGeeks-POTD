import java.util.Scanner;

class Node {
    int data;
    Node next;

    Node(int x) {
        data = x;
        next = null;
    }
}

class Solution {
    Node reverse(Node head, int k) {
        Node curHead = null;
        Node nextHead = null;

        // Define a helper function using a lambda expression
        // The helper function will traverse the linked list and perform the reversal
        // It uses recursion to traverse the list in reverse order
        // The function takes the current node, the previous node, and the position p in the current group as inputs
        // The position p is used to determine when to update the curHead and perform the reversal
        // Java does not support function pointers or lambdas directly like C++, but we can use an inner class for similar functionality
        class TraverseHelper {
            void traverse(Node cur, Node prev, int p) {
                if (cur == null) {
                    return;
                }

                traverse(cur.next, cur, (p + 1) % k);

                if (cur.next == null || p == k - 1) {
                    curHead = cur;
                }

                if (p == 0) {
                    cur.next = nextHead;
                    nextHead = curHead;
                } else {
                    cur.next = prev;
                }
            }
        }

        // Create an instance of the helper class
        TraverseHelper helper = new TraverseHelper();
        helper.traverse(head, null, 0);

        return curHead;
    }
}

/* Function to print linked list */
void printList(Node node) {
    while (node != null) {
        System.out.print(node.data + " ");
        node = node.next;
    }
    System.out.println();
}

/* Drier program to test above function*/
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();

        while (t-- > 0) {
            Node head = null;
            Node temp = null;
            int n = sc.nextInt();

            for (int i = 0; i < n; i++) {
                int value = sc.nextInt();
                if (i == 0) {
                    head = new Node(value);
                    temp = head;
                } else {
                    temp.next = new Node(value);
                    temp = temp.next;
                }
            }

            int k = sc.nextInt();

            Solution ob = new Solution();
            head = ob.reverse(head, k);
            printList(head);
        }

        sc.close();
    }
}
