class Solution {
    Node sortedInsert(Node head1, int key) {
        Node newNode = new Node(key);

        // Case 1: If the linked list is empty or the new node should be inserted at the beginning
        if (head1 == null || key < head1.data) {
            newNode.next = head1;
            return newNode;
        }

        // Case 2: Traverse the linked list to find the correct position to insert the new node
        Node current = head1;
        while (current.next != null && current.next.data < key) {
            current = current.next;
        }

        // Insert the new node at the correct position
        newNode.next = current.next;
        current.next = newNode;

        return head1;
    }
}
