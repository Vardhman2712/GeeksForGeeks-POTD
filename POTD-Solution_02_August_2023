//{ Driver Code Starts
// Initial Template for Java

import java.io.*;
import java.util.*;
class GFG {
    public static void main(String args[]) throws IOException {
        BufferedReader read =
            new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while (t-- > 0) {
            int N, M, x, y;
            String S[] = read.readLine().split(" ");
            N = Integer.parseInt(S[0]);
            M = Integer.parseInt(S[1]);
            int a[][] = new int[N][M];
            for (int i = 0; i < N; i++) {
                String s[] = read.readLine().split(" ");
                for (int j = 0; j < M; j++) a[i][j] = Integer.parseInt(s[j]);
            }
            String s1[] = read.readLine().split(" ");
            x = Integer.parseInt(s1[0]);
            y = Integer.parseInt(s1[1]);
            Solution ob = new Solution();
            System.out.println(ob.shortestDistance(N, M, a, x, y));
        }
    }
}
// } Driver Code Ends


// User function Template for Java

class Solution {
    static int[][] directions = {{-1, 0}, {0, -1}, {1, 0}, {0, 1}};

    int shortestDistance(int N, int M, int A[][], int X, int Y) {
        // Create a boolean array to track visited cells
        boolean[][] visited = new boolean[N][M];

        // Initialize the queue for BFS
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[]{0, 0, 0}); // {row, col, steps}

        while (!queue.isEmpty()) {
            int[] current = queue.poll();
            int row = current[0];
            int col = current[1];
            int steps = current[2];

            // Check if we reached the target cell (X, Y)
            if (row == X && col == Y) {
                return steps;
            }

            // Mark the current cell as visited
            visited[row][col] = true;

            // Explore all four possible directions
            for (int[] dir : directions) {
                int newRow = row + dir[0];
                int newCol = col + dir[1];

                // Check if the new position is within the matrix bounds and contains a 1
                if (newRow >= 0 && newRow < N && newCol >= 0 && newCol < M && A[newRow][newCol] == 1 && !visited[newRow][newCol]) {
                    queue.add(new int[]{newRow, newCol, steps + 1});
                    visited[newRow][newCol] = true; // Mark the new cell as visited
                }
            }
        }

        // If we couldn't reach the target cell, return -1
        return -1;
    }
}
